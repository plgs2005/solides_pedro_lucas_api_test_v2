{
	"info": {
		"_postman_id": "6a23a8f2-3cfa-4caa-8b00-c1d30586d4a3",
		"name": "Pedro Lucas Teste Pr√°tico API",
		"description": "# üëã Introdu√ß√£o\n\nBem-vindo ao espa√ßo de desenvolvimento de API. Este espa√ßo serve como uma √∫nica fonte de verdade para as APIs que constru√≠mos e ajuda novos engenheiros a se integrarem mais rapidamente ao nosso cen√°rio de APIs.\n\n# üöÄ Come√ßando com este espa√ßo\n\nCole√ß√µes de Refer√™ncia  \nEssas cole√ß√µes cont√™m documenta√ß√£o detalhada das APIs da nossa equipe. Elas ajudar√£o voc√™ a entender as capacidades dos servi√ßos que possu√≠mos e como us√°-los efetivamente. Como exemplo, adicionamos a cole√ß√£o de Documenta√ß√£o da API. Ela cont√©m solicita√ß√µes e exemplos para criar, ler, atualizar e deletar cole√ß√µes via API. Recomendamos adicionar cole√ß√µes de refer√™ncia para seus servi√ßos neste espa√ßo.\n\n# Cole√ß√µes Modelo\n\nEssas cole√ß√µes de autoatendimento, organizadas pela nossa equipe, ajudar√£o voc√™ a observar fluxos de trabalho suportados pelos servi√ßos que possu√≠mos. Voc√™ pode enviar solicita√ß√µes diretamente usando esses endpoints. Como exemplo, adicionamos a cole√ß√£o de No√ß√µes B√°sicas de API RESTful que usa a API fake-store para criar, ler, atualizar e deletar produtos. Recomendamos adicionar cole√ß√µes modelo para fluxos de trabalho importantes gerenciados pela sua equipe.\n\n# Ambientes\n\nAmbientes s√£o configurados para gerenciar vari√°veis como URLs base, chaves de API e tokens, cujos valores voc√™ pode alterar dependendo do contexto do seu trabalho (por exemplo, desenvolvimento, teste, produ√ß√£o).\n\n# üõü Ajuda e Suporte\n\nSe voc√™ tiver qualquer d√∫vida ou sugest√£o, por favor, n√£o hesite em entrar em contato com seu gerente ou qualquer membro da equipe de Engenharia.\n\n**Leia o arquivo README para entender o funcionamento atrav√©s da documenta√ß√£o gerada.**\n\n### Contato:\n\nNome: Pedro Lucas Gandara Santos  \nEmail: [plgsantos@icloud.com](https://mailto:plgsantos@icloud.com), [devlaravel@icloud.com](https://mailto:devlaravel@icloud.com)  \nTelefone: +55 11 95090-3204  \nGitHub: Pedro Lucas Fullstack Laravel\n\n## Executando os Testes\n\nPara executar todos os testes de uma s√≥ vez, voc√™ pode ir at√© a aba **Runs** no Postman e clicar no bot√£o **Run Collection**. Isso permitir√° que voc√™ execute todos os endpoints configurados na cole√ß√£o de uma s√≥ vez.\n\nSe preferir, voc√™ tamb√©m pode executar manualmente cada um dos endpoints individualmente.\n\nStartFragment\n\n### Como Executar os Testes no Postman:\n\n1. **Abrir a Cole√ß√£o**:\n    \n    - No painel √† esquerda, selecione a cole√ß√£o desejada.\n        \n2. **Ir para a Aba \"Runs\" (Runner)**:\n    \n    - No canto superior esquerdo do Postman, clique no √≠cone do \"Runner\" ou v√° para a aba \"Runs\".\n        \n3. **Selecionar a Cole√ß√£o para Executar**:\n    \n    - No Postman Runner, selecione a cole√ß√£o que voc√™ deseja executar da lista de cole√ß√µes dispon√≠veis.\n        \n4. **Configurar a Execu√ß√£o**:\n    \n    - Escolha o ambiente adequado, como desenvolvimento, teste ou produ√ß√£o.\n        \n    - Configure as vari√°veis necess√°rias, como `base_url`, `token`, etc.\n        \n5. **Executar a Cole√ß√£o**:\n    \n    - Clique no bot√£o **Run Collection**.\n        \n    - Os testes ser√£o executados automaticamente e os resultados ser√£o exibidos na tela.\n        \n6. **Verificar os Resultados**:\n    \n    - Ap√≥s a execu√ß√£o, voc√™ poder√° ver os resultados dos testes, incluindo status de sucesso/falha, tempo de resposta e quaisquer erros.\n        \n\nSe preferir, voc√™ pode executar manualmente cada um dos endpoints diretamente na interface principal do Postman.\n\nCom isso, voc√™ e sua equipe podem garantir que todos os endpoints estejam funcionando corretamente e verificar quaisquer problemas de forma eficiente.\n\nEndFragment",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "12398704"
	},
	"item": [
		{
			"name": "Registro de Usu√°rio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 201) {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"}\r",
							"\r",
							"pm.test(\"Response status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required field - token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test User\",\n    \"email\": \"test@example.com\",\n    \"password\": \"password\",\n    \"password_confirmation\": \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/register",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"register"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login de Usu√°rio",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code === 200) {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"}\r",
							"\r",
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(300);\r",
							"});\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"pm.test(\"Response has the required field - token\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.exist;\r",
							"});\r",
							"\r",
							"pm.test(\"Token is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.token).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Token should not be empty\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"email\": \"test@example.com\",\n    \"password\": \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{base_url}}/api/login",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Logout de Usu√°rio",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/logout",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obter Detalhes do Usu√°rio Autenticado",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/me",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"me"
					]
				}
			},
			"response": []
		},
		{
			"name": "Listar Registros",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/records",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"records"
					]
				}
			},
			"response": []
		},
		{
			"name": "Obter um Registro Espec√≠fico",
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/records/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"records",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Criar um Novo Registro",
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Test Record\",\n    \"description\": \"Test Description\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/records",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"records"
					]
				}
			},
			"response": []
		},
		{
			"name": "Atualizar um Registro",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"name\": \"Updated Record\",\n    \"description\": \"Updated Description\"\n}"
				},
				"url": {
					"raw": "{{base_url}}/api/records/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"records",
						"{{id}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Excluir um Registro",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{base_url}}/api/records/{{id}}",
					"host": [
						"{{base_url}}"
					],
					"path": [
						"api",
						"records",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost"
		},
		{
			"key": "token",
			"value": ""
		}
	]
}